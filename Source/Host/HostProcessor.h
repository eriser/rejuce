/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __HOSTPROCESSOR_H
#define __HOSTPROCESSOR_H

#include "../../JuceLibraryCode/JuceHeader.h"

#include "../Metronome/MetronomeProcessor.h"

//==============================================================================
/**
*/
class HostProcessor  : public AudioProcessor
{
public:
    //==============================================================================
	HostProcessor();
    ~HostProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock);
    void releaseResources();
    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);
    void reset();

    //==============================================================================
    bool hasEditor() const                  { return true; }
    void* createEditor();

    //==============================================================================
    const String getName() const            { return "HostProcessor"; }

    int getNumParameters();
    float getParameter (int index);
    void setParameter (int index, float newValue);
    const String getParameterName (int index);
    const String getParameterText (int index);

    const String getInputChannelName (int channelIndex) const;
    const String getOutputChannelName (int channelIndex) const;
    bool isInputChannelStereoPair (int index) const;
    bool isOutputChannelStereoPair (int index) const;

    bool acceptsMidi() const;
    bool producesMidi() const;
    bool silenceInProducesSilenceOut() const;
    double getTailLengthSeconds() const;

    //==============================================================================
    int getNumPrograms()                                                { return 0; }
    int getCurrentProgram()                                             { return 0; }
    void setCurrentProgram (int /*index*/)                              { }
    const String getProgramName (int /*index*/)                         { return String::empty; }
    void changeProgramName (int /*index*/, const String& /*newName*/)   { }

    //==============================================================================
    void getStateInformation (MemoryBlock& destData);
    void setStateInformation (const void* data, int sizeInBytes);


    ////////////////////////////////////////////////////////

    void hostAddSynth(AudioProcessor* synth);
    const AudioProcessor* hostGetSynth(int i);


    /////////////////////////////////////////////////////////

private:
    Array<AudioProcessor*> _synths;
    AudioSampleBuffer* _synthBuffers[16];

    MetronomeProcessor* _metronome;
    AudioSampleBuffer* _metronomeBuffer;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (HostProcessor)
};

#endif  // __HOSTPROCESSOR_H
